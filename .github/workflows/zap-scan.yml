name: Security Scan (DAST)

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sundays

jobs:
  security_scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      # Step 1: Create Docker network
      - name: Create Docker Network
        run: docker network create zap-network

      # Step 2: Build the Docker image for the utility-service
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: utility-service:latest

      # Step 3: Run the Docker container for the application in the zap-network
      - name: Run Docker Container
        run: |
          docker run -d --name utility-service \
            --network zap-network \
            -p 8083:8080 \
            -e SPRING_PROFILES_ACTIVE=zapscan \
            utility-service:latest
          
          # Print container logs for debugging
          sleep 10
          docker logs utility-service

      # Step 4: Wait for the application to start and be available
      - name: Wait for Application to Start
        run: |
          echo "Waiting for the application to start..."
          for i in {1..30}; do
            echo "Attempt $i: Checking if application is up..."
            if curl -v http://localhost:8083/actuator/health; then
              echo "Application is up!"
              exit 0
            fi
            echo "Application not ready yet..."
            docker logs utility-service
            sleep 10
          done
          echo "Application failed to start"
          docker logs utility-service
          exit 1

      # Step 5: Run ZAP Full Scan in the same Docker network
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          target: 'http://utility-service:8080'
          token: ${{ secrets.GITHUB_TOKEN }}
          cmd_options: >
            -t http://utility-service:8080
            -r zap_report.html
            -z "-config scanner.attackStrength=HIGH 
                -config scanner.alertThreshold=MEDIUM
                -config view.mode=attack
                -config api.disablekey=true
                -config rules.cookie.ignorelist=true
                -config scanner.level=ATTACK
                -config rules.ascanrules.refs.json=true
                -config rules.ascanrules.script.injection=true
                -config rules.ascanrules.server.side.injection=true
                -config rules.ascanrules.sql.injection=true
                -config rules.ascanrules.nosqli.injection=true
                -config rules.ascanrules.xxe.injection=true
                -config rules.ascanrules.path.traversal=true
                -config rules.ascanrules.remote.code.execution=true"

      # Step 6: Upload the ZAP report as an artifact
      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-report
          path: zap_report.html

      # Fail on critical findings
      - name: Check for High Severity Findings
        run: |
          # Look for High severity findings in ZAP report
          HIGH_COUNT=$(cat zap_report.html | grep -A1 "Risk Level.*Number of Alerts" | grep "High" -A1 | tail -n1 | tr -d ' \t\r\n')
          echo "High severity count: $HIGH_COUNT"
          if [ "$HIGH_COUNT" -gt "0" ]; then
            echo "Critical or High severity vulnerabilities found!"
            exit 1
          else
            echo "No Critical or High severity vulnerabilities found."
            exit 0
          fi